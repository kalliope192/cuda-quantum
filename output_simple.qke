#loc1 = loc("simple.cpp":19:3)
module attributes {llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.triple = "x86_64-unknown-linux-gnu", quake.mangled_name_map = {__nvqpp__mlirgen__ghz = "_ZN3ghzclEi"}} {
  func.func @__nvqpp__mlirgen__ghz(%arg0: i32 loc("simple.cpp":19:3)) attributes {"cudaq-entrypoint", "cudaq-kernel"} {
    %c1_i32 = arith.constant 1 : i32 loc(#loc2)
    %c0_i32 = arith.constant 0 : i32 loc(#loc3)
    %0 = cc.alloca i32 loc(#loc4)
    cc.store %arg0, %0 : !cc.ptr<i32> loc(#loc4)
    %1 = cc.load %0 : !cc.ptr<i32> loc(#loc4)
    %2 = cc.cast signed %1 : (i32) -> i64 loc(#loc5)
    %3 = quake.alloca !quake.veq<?>[%2 : i64] loc(#loc6)
    %4 = quake.extract_ref %3[0] : (!quake.veq<?>) -> !quake.ref loc(#loc7)
    quake.h %4 : (!quake.ref) -> () loc(#loc8)
    cc.scope {
      %5 = cc.alloca i32 loc(#loc10)
      cc.store %c0_i32, %5 : !cc.ptr<i32> loc(#loc10)
      cc.loop while {
        %6 = cc.load %5 : !cc.ptr<i32> loc(#loc10)
        %7 = cc.load %0 : !cc.ptr<i32> loc(#loc4)
        %8 = arith.subi %7, %c1_i32 : i32 loc(#loc11)
        %9 = arith.cmpi slt, %6, %8 : i32 loc(#loc12)
        cc.condition %9 loc(#loc9)
      } do {
        %6 = cc.load %5 : !cc.ptr<i32> loc(#loc10)
        %7 = cc.cast signed %6 : (i32) -> i64 loc(#loc13)
        %8 = quake.extract_ref %3[%7] : (!quake.veq<?>, i64) -> !quake.ref loc(#loc14)
        %9 = cc.load %5 : !cc.ptr<i32> loc(#loc10)
        %10 = arith.addi %9, %c1_i32 : i32 loc(#loc15)
        %11 = cc.cast signed %10 : (i32) -> i64 loc(#loc15)
        %12 = quake.extract_ref %3[%11] : (!quake.veq<?>, i64) -> !quake.ref loc(#loc16)
        quake.x [%8] %12 : (!quake.ref, !quake.ref) -> () loc(#loc17)
        cc.continue loc(#loc9)
      } step {
        %6 = cc.load %5 : !cc.ptr<i32> loc(#loc18)
        %7 = arith.addi %6, %c1_i32 : i32 loc(#loc18)
        cc.store %7, %5 : !cc.ptr<i32> loc(#loc18)
      } loc(#loc9)
    } loc(#loc9)
    %measOut = quake.mz %3 : (!quake.veq<?>) -> !cc.stdvec<!quake.measure> loc(#loc19)
    return loc(#loc1)
  } loc(#loc1)
  func.func @_ZN3ghzclEi(%arg0: !cc.ptr<i8> loc("simple.cpp":19:3), %arg1: i32 loc("simple.cpp":19:3)) {
    return loc(#loc1)
  } loc(#loc1)
} loc(#loc)
#loc = loc(unknown)
#loc2 = loc("simple.cpp":22:29)
#loc3 = loc("simple.cpp":21:9)
#loc4 = loc("simple.cpp":19:19)
#loc5 = loc("simple.cpp":20:22)
#loc6 = loc("simple.cpp":20:20)
#loc7 = loc("simple.cpp":21:7)
#loc8 = loc("simple.cpp":21:5)
#loc9 = loc("simple.cpp":22:5)
#loc10 = loc("simple.cpp":22:10)
#loc11 = loc("simple.cpp":22:25)
#loc12 = loc("simple.cpp":22:21)
#loc13 = loc("simple.cpp":23:24)
#loc14 = loc("simple.cpp":23:22)
#loc15 = loc("simple.cpp":23:30)
#loc16 = loc("simple.cpp":23:28)
#loc17 = loc("simple.cpp":23:7)
#loc18 = loc("simple.cpp":22:32)
#loc19 = loc("simple.cpp":25:5)

